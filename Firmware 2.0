/*
  Open Keezer 1.0
Open source refridgeration controller.
comparable to commercial embedded systems in refrigerators, freezers and wine coolers.

Learn about it here:
   https://www.refrigerationbasics.com/RBIII/controls1.htm


  Atmega 328 chip:
  Reads 10k OHM thermistor and converts to Celsius and then Fahrenhiet using the Steinhart-hart equation.
  Controls refridgeration 
  drives LCD Display
 
 Demonstrates the use of a 16x2 LCD display.  The LiquidCrystal
 library works with all LCD displays that are compatible with the 
 Hitachi HD44780 driver. There are many of them out there, and you
 can usually tell them by the 16-pin interface.

  http://www.arduino.cc/en/Tutorial/LiquidCrystal
 
  The LCD circuit:
 * LCD RS pin to digital pin 12
 * LCD Enable pin to digital pin 11
 * LCD D4 pin to digital pin 5
 * LCD D5 pin to digital pin 4
 * LCD D6 pin to digital pin 3
 * LCD D7 pin to digital pin 2
 * Backlight to digital pin 13
 * 10K resistor:
 * ends to +5V and ground
 * wiper (potentionmeter) to LCD VO pin (pin 3)
 
Other Circuits:
   thermistor to analog pin 0
   pushbutton to digital pin 7
   pushbutton to digtial pin 8
   relay to digial pin 9


 Special Thanks to:
 Massimo Banzi
 Tim O'Reilly
 David A. Mellis
 Limor Fried (http://www.ladyada.net)
 Tom Igoe
 David A. Mellis
 Bob Peak
 The Beverage People (http://www.thebeveragepeople.com/)
 Vinnie Cilurzo
 Sam Caligione
 Jeremy Marshall
 Barry Duffman
 
 
 by Jonathan H. Williams
 
 */

// include the LCD and Math (for steinhart equation) libraries:
#include <LiquidCrystal.h>
 #include <math.h>
// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

// constants won't change. They're used here to 
// set pin numbers:
const int buttonPin = 7;     // Assign the pushbutton pin = "Target temp +"
const int buttonPin2 = 8;     // Assign the pushbutton pin = "Target temp -"
const int actionPin =  9;      // Assign the Relay pin
const int backlightPin =  13;      // Assign the LCD Backlight pin, control the backlight from the code!

     

 
#define NUMSAMPLES 10  // how many samples to take and average, more takes longer but is more 'smooth'

// Steinhart-Hart Thermistor Equation
double Thermistor(int RawADC) {
 double Temp;
 Temp = log(10000.0*((1024.0/RawADC-1))); 
//         =log(10000.0/(1024.0/RawADC-1)) // for pull-up configuration
 Temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * Temp * Temp ))* Temp );
 Temp = Temp - 273.15;            // Convert Kelvin to Celcius
 Temp = (Temp * 9.0)/ 5.0 + 32.0; // Convert Celcius to Fahrenheit
 return Temp;
}


// variables will change:
int buttonState = 0;         // variable for reading the pushbutton status
int buttonState2 = 0;         // variable for reading the pushbutton status
int buttonPushCounter = 40;   // counter for the number of button presses / default target temp in Fahrenheit.
int status = 0;

int samples[NUMSAMPLES];

void setup() {
 // initialize the backlight LED pin as an output:
  pinMode(backlightPin, OUTPUT);   
// initialize the relay pin as an output:
  pinMode(actionPin, OUTPUT);  
  // initialize the first pushbutton pin as an input:
  pinMode(buttonPin, INPUT);
  // initialize the second pushbutton pin as an input:
  pinMode(buttonPin2, INPUT);
  
{
  digitalWrite(backlightPin, HIGH);
   }
{
  Serial.begin(9600);
   
   // set up the LCD's number of rows and columns: 
  lcd.begin(16, 2);
  // Print a message to the LCD.
  lcd.print("Open Keezer");
  lcd.setCursor(1, 1);
  lcd.print("2.0");

// why not have the screen flash?
  delay(2000);
  digitalWrite(backlightPin, LOW);   // turn the LED on (HIGH is the voltage level)
  delay(1000);               // wait for a second
  digitalWrite(backlightPin, HIGH);    // turn the LED off by making the voltage LOW
  delay(2000);               // wait for a second
  
  
  lcd.begin(16, 2);
  
  lcd.print("Actual Temp:");
  
  lcd.setCursor(0, 1);
  
  lcd.print("Target Temp:");
  
}

}
void loop() {
  
 
     // read the state of the pushbutton value:
  buttonState = digitalRead(buttonPin);
  buttonState2 = digitalRead(buttonPin2);

uint8_t i;
  float average;
 
  // take N samples in a row, with a slight delay
  for (i=0; i< NUMSAMPLES; i++) {
   samples[i] = (Thermistor(analogRead(0)));
   delay(10);
  }
 
  // average all the samples out
  average = 0;
  for (i=0; i< NUMSAMPLES; i++) {
     average += samples[i];
  }
  average /= NUMSAMPLES;
    
  // read the analog input into a variable:
   //   int reading = (Thermistor(analogRead(0)));

   // print the result:
  Serial.println(average);

   // wait 10 milliseconds for the analog-to-digital converter
   // to settle after the last reading:
   delay(350);
  
  // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
  lcd.setCursor(12, 0);
  // print the number of seconds since reset:
  lcd.println(average);
  
    lcd.setCursor(14, 0);
    
  lcd.print((char)223); // this is the 'degree' symbol.
  
  lcd.print("F");


// code for the "plus" button. 
if (buttonState != LOW)
  // check if the pushbutton is pressed.
  // if it is, the buttonState is HIGH:
  if (buttonState == HIGH) {
      // if the current state is HIGH then the button
      // wend from off to on:
      buttonPushCounter++;
      
       lcd.setCursor(12, 1);
      lcd.println(buttonPushCounter, DEC);
       lcd.setCursor(14, 1);
      lcd.print((char)223);  // this is the 'degree' symbol.
    lcd.print("F");
  
      delay(10);
    } 
    else {
      // if the current state is LOW then the button
      // went from on to off:
      lcd.println("40"); 
    }
    
// code for the "minus" button
if (buttonState2 != LOW)
  // check if the pushbutton is pressed.
  // if it is, the buttonState is HIGH:
  if (buttonState2 == HIGH) {
      // if the current state is HIGH then the button
      // went from off to on:
      buttonPushCounter--;
      
     lcd.setCursor(12, 1);
      lcd.println(buttonPushCounter, DEC);
       lcd.setCursor(14, 1);
      lcd.print((char)223);
    lcd.print("F");
    
      delay(10);
    } 
    else {
      // if the current state is LOW then the button
      // went from on to off:
      lcd.println("40"); 
    }
/*
 * Below is where the action happens, the differential below sets the "cut in" point. it is the number of degrees above the "target temperature" 
 * that triggers the relay to switch ON.
 * The "cut out" point is the number of degrees below the target that triggers the relay to switch OFF.
 */
    
    if(average > buttonPushCounter+4){  // !!IMPORTANT! this number (after '+') is the DIFFERENTIAL
  status = 1;
  }

if (average < buttonPushCounter-4){  // !!IMPORTANT! this number (after '-') is the DIFFERENTIAL
  status = 0;
  }

if (status == 1){
  digitalWrite(actionPin, HIGH);  // turn on the compressor
  delay(2000); // chill out for at least 2 seconds before doing anything else.
   }
  
  

if (status == 0){
  digitalWrite(actionPin, LOW);
    }
  
   
 
}
